{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../CurrencyForm.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { Col, Container, Row } from \"sveltestrap\";\n  import { Button, Form, FormGroup, FormText, Input, Label } from \"sveltestrap\";\n  import CurrencyForm from \"./CurrencyForm.svelte\";\n  let convertedResult;\n  function showResult(e) {\n    const { amount, currency } = e.detail;\n\n    const formatter = new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency\n    });\n    convertedResult = formatter.format(amount);\n  }\n\n  if (\"serviceWorker\" in navigator) {\n    console.log(\"Will the service worker register?\");\n    navigator.serviceWorker\n      .register(\"service-worker.js\")\n      .then(function(reg) {\n        console.log(\"Yes, it did.\");\n      })\n      .catch(function(err) {\n        console.log(\"No it didn't. This happened: \", err);\n      });\n  }\n</script>\n\n<style>\n  h1,\n  h2 {\n    text-align: center;\n    padding: 20px;\n  }\n</style>\n\n<Container>\n  <Row>\n    <Col xs=\"12\">\n      <h1>Currency Convertor</h1>\n    </Col>\n  </Row>\n\n  <CurrencyForm on:calculate={showResult} />\n\n  {#if convertedResult}\n    <Row>\n      <Col xs=\"12\">\n        <h2>{convertedResult}</h2>\n      </Col>\n    </Row>\n  {/if}\n</Container>\n",
    "<script>\n  import { onMount, createEventDispatcher } from \"svelte\";\n\n  import { Col, Container, Row } from \"sveltestrap\";\n  import { Button, Form, FormGroup, FormText, Input, Label } from \"sveltestrap\";\n\n  import preferenceStore from \"./preferenceStore.js\";\n  import { getCurrencies, getRates } from \"./request.js\";\n\n  const dispatch = createEventDispatcher();\n\n  let currencies = [];\n  let rates = {};\n  let fromCurrency;\n  let toCurrency;\n  let amount;\n\n  onMount(async () => {\n    currencies = await getCurrencies();\n    rates = await getRates($preferenceStore.from);\n    fromCurrency = $preferenceStore.from;\n    toCurrency = $preferenceStore.to;\n  });\n\n  $: newRates(fromCurrency);\n\n  $: preferenceStore.set(fromCurrency, toCurrency);\n\n  $: rate = rates[toCurrency];\n\n  async function newRates(baseCurrency) {\n    if (baseCurrency) {\n      rates = await getRates(baseCurrency);\n    }\n  }\n\n  function onConvert() {\n    dispatch(\"calculate\", { amount: rate * amount, currency: toCurrency });\n  }\n</script>\n\n<style>\n  :global(button) {\n    width: 100%;\n  }\n</style>\n\n<Row>\n  <Col md={{ size: 6, offset: 3 }}>\n    <FormGroup>\n      <Label for=\"fromAmount\">Money</Label>\n      <Input\n        id=\"fromAmount\"\n        type=\"number\"\n        min=\"1\"\n        bind:value={amount}\n        max=\"500000000\"\n        placeholder=\"Amount in dollars\" />\n    </FormGroup>\n  </Col>\n</Row>\n\n<Row>\n  <Col md={{ size: 6, offset: 3 }}>\n    <FormGroup>\n\n      <Label for=\"exampleSelect\">Currency</Label>\n      <Input\n        bind:value={fromCurrency}\n        type=\"select\"\n        name=\"select\"\n        id=\"exampleSelect\">\n        {#each currencies as currency}\n          <option value={currency}>{currency}</option>\n        {/each}\n      </Input>\n    </FormGroup>\n  </Col>\n</Row>\n\n<Row>\n  <Col md={{ size: 6, offset: 3 }}>\n    <FormGroup>\n\n      <Label for=\"exampleSelect\">Convert to</Label>\n      <Input\n        type=\"select\"\n        name=\"select\"\n        id=\"exampleSelect\"\n        bind:value={toCurrency}>\n        {#each currencies as currency}\n          <option value={currency}>{currency}</option>\n        {/each}\n      </Input>\n    </FormGroup>\n  </Col>\n</Row>\n\n<Row>\n  <Col md={{ size: 6, offset: 3 }}>\n    <button on:click={onConvert} type=\"button\" class=\"btn btn-primary\">\n      Calculate Currency\n    </button>\n  </Col>\n</Row>\n"
  ],
  "names": [],
  "mappings": "AA6BE,iBAAE,CACF,EAAE,eAAC,CAAC,AACF,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,IAAI,AACf,CAAC;ACSO,MAAM,AAAE,CAAC,AACf,KAAK,CAAE,IAAI,AACb,CAAC"
}